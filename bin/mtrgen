#!/usr/bin/env php
<?php

declare(strict_types=1);

$root_app = dirname(__DIR__);

if (!is_file($root_app . '/vendor/autoload.php')) {
    $root_app = dirname(__DIR__, 4);
}

require_once $root_app . '/vendor/autoload.php';

use Matronator\Generator\Config\Configurator;
use Matronator\Generator\Entity;
use Matronator\Generator\Facade;
use Matronator\Generator\FileGenerator;
use Matronator\Generator\FormControl;
use Matronator\Generator\Repository;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\SingleCommandApplication;

function command(InputInterface $input, OutputInterface $output)
{
    $type = $input->getOption('type');
    $name = $input->getArgument('name');
    $configFile = $input->getOption('config');

    if ($configFile) {
        $config = new Configurator($configFile);
        $output->writeln('Generating from config: ' . $configFile . '...');
        if (isset($config->model) && $config->model) {
            $modelFiles = $config->generateModel($config->model);
            FileGenerator::writeFile($modelFiles);
        }
        if (isset($config->ui) && $config->ui) {
            $uiFiles = $config->generateUI($config->ui);
            FileGenerator::writeFile($uiFiles);
        }
    } else {
        $file = null;
        // if ($type == 'facade') {
        // }

        $facade = Facade::generate($name);
        $repository = Repository::generate($name);
        $entity = Entity::generate($name);
        $control = FormControl::generate($name);

        FileGenerator::writeFile($facade, $repository, $entity, $control);
    }

    $output->writeln('Generated!');
}

(new SingleCommandApplication())
    ->setName('File Generator')
    ->addOption(
        'type', 't',
        InputOption::VALUE_OPTIONAL,
        'Entity type',
        'database'
    )
    ->addOption(
        'config', 'c',
        InputOption::VALUE_REQUIRED,
        'Path to config file'
    )
    ->addArgument('name', InputArgument::OPTIONAL, 'Class name.')
    ->setCode('command')
    ->run();
